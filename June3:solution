Substrings with K Distinct
solution in C++ :
class Solution {
    long long atMostK(const std::string &s, int k) {
        if (k < 0) return 0;
        std::vector<int> freq(26, 0);
        int left = 0, distinct = 0;
        long long ans = 0;

        for (int right = 0; right < (int)s.size(); ++right) {
            if (freq[s[right] - 'a'] == 0)
                ++distinct;
            ++freq[s[right] - 'a'];

            while (distinct > k) {
                --freq[s[left] - 'a'];
                if (freq[s[left] - 'a'] == 0)
                    --distinct;
                ++left;
            }
            ans += right - left + 1;
        }
        return ans;
    }

  public:
    long long countSubstr(std::string &s, int k) {
        if (k == 0) return 0;
        return atMostK(s, k) - atMostK(s, k - 1);
    }
};
