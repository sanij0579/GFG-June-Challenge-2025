Mobile numeric keypad
Solution:
class Solution:
    def getCount(self, n):
        if n <= 0:
            return 0
        if n == 1:
            return 10  # All digits are valid single-digit numbers

        # Adjacency list of digits allowed to move from current digit
        moves = {
            0: [0, 8],
            1: [1, 2, 4],
            2: [2, 1, 3, 5],
            3: [3, 2, 6],
            4: [4, 1, 5, 7],
            5: [5, 2, 4, 6, 8],
            6: [6, 3, 5, 9],
            7: [7, 4, 8],
            8: [8, 5, 7, 9, 0],
            9: [9, 6, 8]
        }

        # DP table: dp[length][digit] = ways to form length using starting at digit
        dp = [[0 for _ in range(10)] for _ in range(n + 1)]

        # Base case: for length 1, each digit has 1 way
        for digit in range(10):
            dp[1][digit] = 1

        # Fill the table for lengths from 2 to n
        for length in range(2, n + 1):
            for digit in range(10):
                for neighbor in moves[digit]:
                    dp[length][digit] += dp[length - 1][neighbor]

        # Total combinations starting from any digit
        return sum(dp[n][digit] for digit in range(10))
